# FILE: backend/services/reports/complete_tax_report.py

from io import BytesIO
from typing import Dict, Any, List
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer, PageBreak
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfgen.canvas import Canvas
import logging
import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_comprehensive_tax_report(report_dict: Dict[str, Any]) -> bytes:
    """
    Generates a comprehensive tax report PDF using ReportLab from scratch,
    without relying on form fields. It includes:
      1) Beginning of Year Holdings
      2) Capital Gains Summary
      3) Income Summary
      4) End of Year Balances
      5) Capital Gains/Losses Transactions
      6) Income Transactions
      7) Gifts, Donations & Lost Assets
      8) Expenses

    This function remains unchanged since it doesn't require form-filling
    or ghostscript. It uses the 'report_dict' structure from 'reporting_core'
    to build a final PDF in memory.
    """
    buffer = BytesIO()
    styles = getSampleStyleSheet()

    # --------------------- Styles ---------------------
    heading_style = ParagraphStyle(
        name="Heading1Left",
        parent=styles["Heading1"],
        alignment=0,
        spaceBefore=12,
        spaceAfter=8,
    )
    normal_style = styles["Normal"]
    wrapped_style = ParagraphStyle(
        name="Wrapped",
        parent=normal_style,
        fontSize=8,
        leading=10,
        wordWrap="CJK",
    )
    right_aligned_style = ParagraphStyle(
        name="RightAligned",
        parent=wrapped_style,
        alignment=2,
    )

    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        leftMargin=1.0 * inch,
        rightMargin=0.75 * inch,
        topMargin=0.75 * inch,
        bottomMargin=0.75 * inch,
    )

    def on_first_page(canvas: Canvas, doc_obj):
        # No page number on the title page
        pass

    def on_later_pages(canvas: Canvas, doc_obj):
        page_num = doc_obj.page - 1
        canvas.setFont("Helvetica", 9)
        canvas.drawString(0.5 * inch, 0.5 * inch, "Generated by BitcoinTX")
        canvas.drawRightString(7.75 * inch, 0.5 * inch, f"{page_num}")

    story: List = []

    # --------------------- Helper Functions ---------------------
    def wrap_text(text: str, style=wrapped_style) -> Paragraph:
        return Paragraph(text or "", style)

    def iso_to_mmddyyyy(iso_str: str) -> str:
        """Convert ISO8601 to MM/DD/YYYY for more IRS-like display."""
        if not iso_str:
            return ""
        iso_str_fixed = iso_str.replace("Z", "+00:00")
        try:
            dt = datetime.datetime.fromisoformat(iso_str_fixed)
            return dt.strftime("%m/%d/%Y")
        except ValueError:
            return iso_str

    def fmt_usd(value: float) -> str:
        """Format as USD with 2 decimals."""
        return f"${value:,.2f}"

    def fmt_btc(value: float) -> str:
        """Format BTC with 8 decimals."""
        return f"{value:,.8f}"

    # --------------------- Extract Basic Info ---------------------
    tax_year = report_dict.get("tax_year", "Unknown Year")
    report_date = report_dict.get("report_date", "Unknown Date")
    period = report_dict.get("period", "N/A")

    cg_transactions = report_dict.get("capital_gains_transactions", [])
    inc_transactions = report_dict.get("income_transactions", [])

    # --------------------- Title Page ---------------------
    story.append(Paragraph(f"Tax Report {tax_year}", styles["Title"]))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(f"Date: {report_date}", normal_style))
    story.append(Paragraph(f"Period: {period}", normal_style))
    story.append(Spacer(1, 0.2 * inch))

    # Content listing
    story.append(Paragraph("Content", heading_style))
    content_list = [
        "1. Beginning of Year Holdings",
        "2. Capital Gains Summary",
        "3. Income Summary",
        "4. End of Year Balances",
        "5. Capital Gains/Losses Transactions",
        "6. Income Transactions",
        "7. Gifts, Donations & Lost Assets",
        "8. Expenses",
    ]
    for item in content_list:
        story.append(Paragraph(item, normal_style))
    story.append(Spacer(1, 0.2 * inch))

    notes = (
        "All fiat values and prices are in USD unless stated otherwise. "
        "Capital gains have been calculated using the FIFO accounting method. "
        "Trading between BTC and USD is treated as a taxable event. "
        "Market prices are determined using the average market value at the time of disposal "
        "unless overridden. All dates are shown in MM/DD/YYYY (IRS format). "
        "Capital gains from BTC with a holding period over 1 year are marked as Long Term gains; "
        "shorter periods are Short Term gains. This report may be used for tax purposes "
        "after verification by you or your tax advisor."
    )
    story.append(Paragraph(notes, normal_style))
    story.append(Paragraph("Generated by BitcoinTX", normal_style))
    story.append(PageBreak())

    # =====================================================
    # 1) Beginning of Year Holdings
    # =====================================================
    start_of_year = report_dict.get("start_of_year_balances", [])
    story.append(Paragraph(f"{tax_year} Beginning of Year Holdings", heading_style))
    story.append(Spacer(1, 0.1 * inch))

    if not start_of_year:
        story.append(Paragraph("No data for beginning of year holdings", normal_style))
        story.append(Spacer(1, 0.5 * inch))
    else:
        data = [["Quantity (BTC)", "Avg Cost Basis (USD)", "Value (USD)"]]
        total_quantity = 0.0
        total_value_sum = 0.0
        weighted_sum = 0.0

        for row in start_of_year:
            qty = row.get("quantity", 0.0)
            cost_basis = row.get("avg_cost_basis", 0.0)
            val = row.get("value", 0.0)

            total_quantity += qty
            total_value_sum += val
            weighted_sum += (qty * cost_basis)

        if total_quantity > 0:
            overall_cost_basis = weighted_sum / total_quantity
        else:
            overall_cost_basis = 0.0

        # Single aggregated row
        data.append([
            Paragraph(fmt_btc(total_quantity), right_aligned_style),
            Paragraph(fmt_usd(overall_cost_basis), right_aligned_style),
            Paragraph(fmt_usd(total_value_sum), right_aligned_style),
        ])

        table = Table(data, colWidths=[1.5 * inch, 1.5 * inch, 1.5 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (0, 0), (-1, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 2) Capital Gains Summary
    # =====================================================
    short_term = {"proceeds": 0.0, "basis": 0.0, "gain": 0.0}
    long_term = {"proceeds": 0.0, "basis": 0.0, "gain": 0.0}
    num_disposals = 0

    cg_transactions = report_dict.get("capital_gains_transactions", [])
    for tx in cg_transactions:
        if tx.get("asset") == "BTC":
            num_disposals += 1
            holding = (tx.get("holding_period") or "").lower()
            proceeds = tx.get("proceeds", 0.0)
            cost = tx.get("cost", 0.0)
            gain = tx.get("gain_loss", 0.0)
            if holding.startswith("short"):
                short_term["proceeds"] += proceeds
                short_term["basis"] += cost
                short_term["gain"] += gain
            else:
                long_term["proceeds"] += proceeds
                long_term["basis"] += cost
                long_term["gain"] += gain

    story.append(Paragraph(f"{tax_year} Capital Gains Summary", heading_style))
    story.append(Spacer(1, 0.1 * inch))

    data = [
        ["Metric", "Short Term", "Long Term"],
        ["Number of Disposals", str(num_disposals), ""],
        ["Proceeds from Sales",
         fmt_usd(short_term["proceeds"]),
         fmt_usd(long_term["proceeds"])],
        ["Acquisition Costs",
         fmt_usd(short_term["basis"]),
         fmt_usd(long_term["basis"])],
        ["Profits, Before Losses",
         fmt_usd(max(short_term["gain"], 0)),
         fmt_usd(max(long_term["gain"], 0))],
        ["Losses",
         fmt_usd(-min(short_term["gain"], 0)),
         fmt_usd(-min(long_term["gain"], 0))],
        ["Net Gains",
         fmt_usd(short_term["gain"]),
         fmt_usd(long_term["gain"])],
    ]

    cg_table = Table(data, colWidths=[2.5 * inch, 2 * inch, 2 * inch])
    cg_table.setStyle(TableStyle([
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("ALIGN", (1, 0), (-1, -1), "RIGHT"),
        ("FONTSIZE", (0, 0), (-1, -1), 8),
    ]))
    story.append(cg_table)
    story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 3) Income Summary
    # =====================================================
    inc_transactions = report_dict.get("income_transactions", [])
    inc_map = {"Income": 0.0, "Interest": 0.0, "Reward": 0.0}

    for tx in inc_transactions:
        if tx.get("asset") in ("BTC", "USD"):
            ttype = tx.get("type")
            if ttype in inc_map:
                inc_map[ttype] += tx.get("value_usd", 0.0)

    income_sum = inc_map["Income"]
    reward_sum = inc_map["Reward"]
    interest_sum = inc_map["Interest"]
    total_income = income_sum + reward_sum + interest_sum

    story.append(Paragraph(f"{tax_year} Income Summary", heading_style))
    story.append(Spacer(1, 0.1 * inch))

    data = [
        ["Source", "Amount (USD)"],
        ["Income", fmt_usd(income_sum)],
        ["Reward", fmt_usd(reward_sum)],
        ["Interest", fmt_usd(interest_sum)],
        ["Total", fmt_usd(total_income)],
    ]

    inc_table = Table(data, colWidths=[2.5 * inch, 2.0 * inch])
    inc_table.setStyle(TableStyle([
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("ALIGN", (1, 0), (-1, -1), "RIGHT"),
        ("FONTSIZE", (0, 0), (-1, -1), 8),
    ]))
    story.append(inc_table)
    story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 4) End of Year Balances
    # =====================================================
    eoy_balances = report_dict.get("end_of_year_balances", [])
    story.append(Paragraph(f"{tax_year} End of Year Balances", heading_style))
    story.append(Spacer(1, 0.1 * inch))

    if not eoy_balances:
        story.append(Paragraph("No data for end of year balances", normal_style))
        story.append(Spacer(1, 0.5 * inch))
    else:
        data = [["Asset", "Quantity", "Cost (USD)", "Value (USD)", "Description"]]
        total_btc = 0.0
        total_cost = 0.0
        total_value = 0.0

        for bal in eoy_balances:
            # Example: "BTC (Bitcoin)"
            if bal["asset"].startswith("BTC"):
                qty = bal.get("quantity", 0.0)
                cst = bal.get("cost", 0.0)
                val = bal.get("value", 0.0)

                data.append([
                    wrap_text(bal["asset"]),
                    Paragraph(fmt_btc(qty), right_aligned_style),
                    Paragraph(fmt_usd(cst), right_aligned_style),
                    Paragraph(fmt_usd(val), right_aligned_style),
                    wrap_text(bal["description"]),
                ])

                total_btc += qty
                total_cost += cst
                total_value += val

        # Weighted average cost
        if total_btc > 0:
            avg_cost_basis = total_cost / total_btc
        else:
            avg_cost_basis = 0.0

        data.append([
            "Total",
            Paragraph(fmt_btc(total_btc), right_aligned_style),
            Paragraph(fmt_usd(total_cost), right_aligned_style),
            Paragraph(fmt_usd(total_value), right_aligned_style),
            Paragraph(
                f"Avg Cost Basis = {fmt_usd(avg_cost_basis)} per BTC",
                wrapped_style
            ),
        ])

        table = Table(data, colWidths=[1.5 * inch, 1.2 * inch, 1.2 * inch, 1.2 * inch, 1.6 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (1, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 5) Capital Gains/Losses Transactions
    # =====================================================
    if cg_transactions:
        story.append(Paragraph(f"{tax_year} Capital Gains/Losses Transactions", heading_style))
        story.append(Spacer(1, 0.1 * inch))

        data = [
            ["Date Sold", "Date Acquired", "Asset", "Amount", "Cost (USD)", "Proceeds (USD)", "Gain/Loss", "Holding"]
        ]
        for tx in cg_transactions:
            if tx.get("asset") == "BTC":
                sold_date_str = iso_to_mmddyyyy(tx.get("date_sold", ""))
                acq_date_str = iso_to_mmddyyyy(tx.get("date_acquired", ""))
                amt_str = fmt_btc(tx.get("amount", 0.0))
                cost_str = fmt_usd(tx.get("cost", 0.0))
                proceeds_str = fmt_usd(tx.get("proceeds", 0.0))
                gain_str = fmt_usd(tx.get("gain_loss", 0.0))

                data.append([
                    wrap_text(sold_date_str),
                    wrap_text(acq_date_str),
                    wrap_text("BTC"),
                    Paragraph(amt_str, right_aligned_style),
                    Paragraph(cost_str, right_aligned_style),
                    Paragraph(proceeds_str, right_aligned_style),
                    Paragraph(gain_str, right_aligned_style),
                    wrap_text(tx.get("holding_period", "")),
                ])

        table = Table(data, colWidths=[1.0 * inch, 1.0 * inch, 0.6 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (3, 0), (6, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 6) Income Transactions
    # =====================================================
    if inc_transactions:
        story.append(Paragraph(f"{tax_year} Income Transactions", heading_style))
        story.append(Spacer(1, 0.1 * inch))

        data = [["Date", "Asset", "Amount", "Value (USD)", "Type", "Description"]]
        for tx in inc_transactions:
            if tx.get("asset") in ("BTC", "USD"):
                d_str = iso_to_mmddyyyy(tx.get("date", ""))
                amt_str = fmt_btc(tx.get("amount", 0.0))
                val_str = fmt_usd(tx.get("value_usd", 0.0))
                row_type = tx.get("type", "")
                desc = tx.get("description", "")

                data.append([
                    wrap_text(d_str),
                    wrap_text(tx["asset"]),
                    Paragraph(amt_str, right_aligned_style),
                    Paragraph(val_str, right_aligned_style),
                    wrap_text(row_type),
                    wrap_text(desc),
                ])

        table = Table(data, colWidths=[1.0 * inch, 0.6 * inch, 0.8 * inch, 0.8 * inch, 0.8 * inch, 2.2 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 7) Gifts, Donations & Lost Assets
    # =====================================================
    gifts_lost = report_dict.get("gifts_donations_lost", [])
    if gifts_lost:
        story.append(Paragraph(f"{tax_year} Gifts, Donations & Lost Assets", heading_style))
        story.append(Spacer(1, 0.1 * inch))

        data = [["Date", "Asset", "Amount", "Value (USD)", "Type"]]
        for item in gifts_lost:
            if item.get("asset") == "BTC":
                d_str = iso_to_mmddyyyy(item.get("date", ""))
                amt_str = fmt_btc(item.get("amount", 0.0))
                val_str = fmt_usd(item.get("value_usd", 0.0))
                row_type = item.get("type", "")

                data.append([
                    wrap_text(d_str),
                    wrap_text("BTC"),
                    Paragraph(amt_str, right_aligned_style),
                    Paragraph(val_str, right_aligned_style),
                    wrap_text(row_type),
                ])

        table = Table(data, colWidths=[1.0 * inch, 0.8 * inch, 0.9 * inch, 0.9 * inch, 1.3 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)
        story.append(Spacer(1, 0.5 * inch))

    # =====================================================
    # 8) Expenses
    # =====================================================
    expenses = report_dict.get("expenses", [])
    story.append(Paragraph(f"{tax_year} Expenses", heading_style))
    story.append(Spacer(1, 0.1 * inch))

    if not expenses:
        story.append(Paragraph("No transactions", normal_style))
    else:
        data = [["Date", "Asset", "Amount", "Value (USD)", "Type"]]
        for exp in expenses:
            if exp.get("asset") in ("BTC", "USD"):
                d_str = iso_to_mmddyyyy(exp.get("date", ""))
                amt_str = fmt_btc(exp.get("amount", 0.0))
                val_str = fmt_usd(exp.get("value_usd", 0.0))
                row_type = exp.get("type", "")

                data.append([
                    wrap_text(d_str),
                    wrap_text(exp["asset"]),
                    Paragraph(amt_str, right_aligned_style),
                    Paragraph(val_str, right_aligned_style),
                    wrap_text(row_type),
                ])
        table = Table(data, colWidths=[1.0 * inch, 0.8 * inch, 0.9 * inch, 0.9 * inch, 1.3 * inch])
        table.setStyle(TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 0), (3, -1), "RIGHT"),
            ("FONTSIZE", (0, 0), (-1, -1), 8),
        ]))
        story.append(table)

    story.append(Spacer(1, 0.5 * inch))

    # Build the PDF in memory
    doc.build(story, onFirstPage=on_first_page, onLaterPages=on_later_pages)
    pdf_bytes = buffer.getvalue()
    buffer.close()
    logger.info(f"Generated comprehensive tax report for {tax_year}")
    return pdf_bytes


# ----------------------------------------------------------------------
# Example local test usage:
# ----------------------------------------------------------------------
if __name__ == "__main__":
    sample_report = {
        "tax_year": "2024",
        "report_date": "2025-03-20 23:42:49",
        "period": "2024-01-01 to 2024-12-31",
        "start_of_year_balances": [
            {"quantity": 0.10, "avg_cost_basis": 30000.0, "value": 32000.0},
            {"quantity": 0.25, "avg_cost_basis": 35000.0, "value": 38000.0},
        ],
        "capital_gains_transactions": [
            {
                "date_sold": "2024-01-02T10:00:00Z",
                "date_acquired": "2023-02-10T14:20:00Z",
                "asset": "BTC",
                "amount": 0.01,
                "cost": 400.00,
                "proceeds": 450.00,
                "gain_loss": 50.00,
                "holding_period": "SHORT",
            },
            {
                "date_sold": "2024-07-15T09:30:00Z",
                "date_acquired": "2022-07-15T09:30:00Z",
                "asset": "BTC",
                "amount": 0.05,
                "cost": 2000.00,
                "proceeds": 2100.00,
                "gain_loss": 100.00,
                "holding_period": "LONG",
            },
        ],
        "income_transactions": [
            {
                "date": "2024-03-01T08:00:00Z",
                "asset": "BTC",
                "amount": 0.005,
                "value_usd": 250.00,
                "type": "Income",
                "description": "Consulting Payment"
            },
            {
                "date": "2024-06-20T09:30:00Z",
                "asset": "USD",
                "amount": 500.00,
                "value_usd": 500.00,
                "type": "Interest",
                "description": "Some Bank Interest"
            }
        ],
        "end_of_year_balances": [
            {
                "asset": "BTC (Bitcoin)",
                "quantity": 0.75000000,
                "cost": 22500.00,
                "value": 70500.00,
                "description": "@ $94000 per BTC on 2024-12-31"
            }
        ],
        "gifts_donations_lost": [],
        "expenses": [],
    }

    pdf_bytes = generate_comprehensive_tax_report(sample_report)
    with open("test_report.pdf", "wb") as f:
        f.write(pdf_bytes)
    print("Test report generated as test_report.pdf")